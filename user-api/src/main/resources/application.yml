spring:

  elasticsearch:
    uris: ${ELASTICSEARCH_URIS:http://community-elasticsearch:9200}

  datasource:
    url:      ${SPRING_DATASOURCE_URL:jdbc:mysql://mysql:3306/community?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC}
    username: ${SPRING_DATASOURCE_USERNAME:user}
    password: ${SPRING_DATASOURCE_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

  logging:
    level:
      org:
        hibernate: DEBUG

  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY_ID}
        secret-key: ${AWS_SECRET_ACCESS_KEY}
      region:
        static: ${AWS_REGION}
      s3:
        bucket: post-pulse-bucket-034099

  openfeign:
    okhttp:
      enabled: true

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.trusted.packages: com.project.common.domain.dto
    consumer:
      group-id: notification-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.project.common.domain.dto

  data:
    redis:
      port: ${REDIS_PORT:6379}
      host: ${REDIS_HOST:redis}

mailgun:
  key: ${MAILGUN_KEY}

jwt:
  secret: ${JWT_SECRET}
